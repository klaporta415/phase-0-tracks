Display the information in one table (either table is fine).

sqlite> SELECT * FROM family_members;
1|Kaley|2
2|Chloe|2
3|Pam|1
4|Kim|1
5|Rich|3
6|Nick|3
sqlite>

Update an item that meets some condition (you can choose a condition that makes sense).

sqlite> UPDATE family_members SET name="Mackenzie" WHERE name="Rich";
sqlite> SELECT * FROM family_members;
1|Kaley|2
2|Chloe|2
3|Pam|1
4|Kim|1
5|Mackenzie|3
6|Nick|3
sqlite>

Display the information in both tables using one query.

sqlite> SELECT * FROM family_members INNER JOIN family_origin ON family_origin_id=family_origin.id;
1|Kaley|2|2|La Porta
2|Chloe|2|2|La Porta
3|Pam|1|1|Kusta
4|Kim|1|1|Kusta
5|Mackenzie|3|3|Rot
6|Nick|3|3|Rot
sqlite>

Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.

sqlite> SELECT name, family_of_origin FROM family_members INNER JOIN family_origin ON family_origin.id=family_members.family_origin_id;
Kaley|La Porta
Chloe|La Porta
Pam|Kusta
Kim|Kusta
Mackenzie|Rot
Nick|Rot
sqlite>

Delete an item that meets some condition (you can choose a condition that makes sense).

sqlite> DELETE FROM family_members WHERE family_origin_id=3;
sqlite> SELECT * FROM family_members;
1|Kaley|2
2|Chloe|2
3|Pam|1
4|Kim|1
sqlite>

Trying different types of joins:

CROSS JOIN:
sqlite> SELECT name, family_of_origin FROM family_members CROSS JOIN family_origin;
Kaley|Kusta
Kaley|La Porta
Kaley|Rot
Chloe|Kusta
Chloe|La Porta
Chloe|Rot
Pam|Kusta
Pam|La Porta
Pam|Rot
Kim|Kusta
Kim|La Porta
Kim|Rot
sqlite>

LEFT OUTER JOIN:
sqlite> SELECT name, family_of_origin FROM family_members LEFT OUTER JOIN family_origin ON family_members.family_origin_id=family_origin.id;
Kaley|La Porta
Chloe|La Porta
Pam|Kusta
Kim|Kusta
sqlite>